%include "stage2info.inc"
ORG STAGE2_RUN_OFS

BITS 16

start:              ; start label from where our code starts

	xor ax,ax           ; set ax register to 0
	mov ds,ax           ; set data segment(ds) to 0
	mov es,ax           ; set extra segment(es) to 0
	mov bx,0x8000

	mov si, BadApple              ; point BadApple to source index
	call print_string				 ; call print different color string function

	BadApple db  ';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;fftt;;;;;;;;;;;;;;;;;;/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ii;;CC@@GGff;;;;;;;;;;;;;;;;/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CC88@@@@00tt;;;;;;;;;;;;;;;;/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iitt88@@@@@@CC;;;;;;;;;;;;;;/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11@@@@@@@@@@ff;;;;;;;;;;;;/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GG@@@@LLttii;;;;;;;;;;;;/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CC@@@@0088CC;;;;;;;;;;;;/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;88@@@@0000CCii11ffCCCC/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CC88@@@@@@GG88@@@@@@@@@@/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GG00GGCCLLCC@@@@@@@@@@@@@@@@@@@@@@@@/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ffLLCC1111@@@@@@@@8888@@@@@@@@@@@@/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ii;;;;ii;;ii8800;;11LLCC00@@@@/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ttff;;;;;;;;;;iitt;;;;;;;;;;;;;;;;/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;LL00@@@@GGii;;;;;;;;;;;;;;;;/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11LL@@@@@@@@ff;;;;;;;;;;;;;;/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11@@@@@@@@GG;;;;;;;;;;;;;;/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ii00@@88LLLL11;;;;;;;;;;;;/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;00@@@@LL88CC;;;;;;;;;;;;/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;88@@@@88GGtt;;iiffffff/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ff@@@@@@88GG0088@@@@@@@@/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;LLCCLLffffff@@@@@@@@@@@@@@@@@@@@@@@@/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;LLCC00ttff@@@@@@@@@@@@@@@@@@@@@@@@/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ii;;;;ttiiff00GGiiLLGG88@@@@@@/;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;LLCC;;;;;;;;ii

print_string:
	mov ah, 0x0E            ; value to tell interrupt handler that take value from al & print it

.repeat_next_char:
	lodsb   			         ; get character from string
	cmp al, '\'                  ; cmp al with end of string
	je .wait	    			 ; if char is zero, end of string	
	cmp al, '/'                  ; cmp al with end of string
	je .newline	    			 ; if char is zero, end of string				  
	cmp al, 0                    ; cmp al with end of string
	je .done_print		    	 ; if char is zero, end of string
	int 0x10                	 ; otherwise, print it
	jmp .repeat_next_char   	 ; jmp to .repeat_next_char if not 0

.done_print:
	ret               	    ;return

.newline:
	mov ah, 0Eh       ;print new line sequence
	mov al, 0Dh
	int 10h
	mov al, 0Ah
	int 10h
	jmp .repeat_next_char

.wait:
	; waiting for a sec
	MOV CX,18 ; the 18 is how much time to get how long in secs do time/18
	.1:
		HLT
		LOOP .1
	jmp .newline
	